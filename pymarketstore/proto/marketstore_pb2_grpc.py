# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from pymarketstore.proto import marketstore_pb2 as pymarketstore_dot_proto_dot_marketstore__pb2


class MarketstoreStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/proto.Marketstore/Query',
                request_serializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiQueryRequest.SerializeToString,
                response_deserializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiQueryResponse.FromString,
                )
        self.Write = channel.unary_unary(
                '/proto.Marketstore/Write',
                request_serializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiWriteRequest.SerializeToString,
                response_deserializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiServerResponse.FromString,
                )


class MarketstoreServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketstoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiQueryRequest.FromString,
                    response_serializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiQueryResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiWriteRequest.FromString,
                    response_serializer=pymarketstore_dot_proto_dot_marketstore__pb2.MultiServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.Marketstore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Marketstore(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Marketstore/Query',
            pymarketstore_dot_proto_dot_marketstore__pb2.MultiQueryRequest.SerializeToString,
            pymarketstore_dot_proto_dot_marketstore__pb2.MultiQueryResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Marketstore/Write',
            pymarketstore_dot_proto_dot_marketstore__pb2.MultiWriteRequest.SerializeToString,
            pymarketstore_dot_proto_dot_marketstore__pb2.MultiServerResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
